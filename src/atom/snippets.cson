# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson

'.text.plain':
    'standup':
        'prefix': 'standup'
        'body': '''
                *yesterday*
                - $0

                *today*
                -
                '''

'.source.js':
    'Meta Viewport':
        'prefix': 'metaviewport'
        'body': '''
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                '''

    'commonJS require':
        'prefix': 'req'
        'body': "const $1 = require('$2')"

    'export named function':
        'prefix': 'efn'
        'body': '''
                export function $1($2) {
                  $3
                }
                '''

    # React
    'React Native Component Function':
        'prefix': 'rnf'
        'body': '''
                import React from 'react'
                import { View } from 'react-native'

                export default function $1(props) {
                  return (
                    ${3:<View></View>}
                  )
                }
                '''

    'Bind Function':
        'prefix': 'bf'
        'body': 'this.${1} = this.${1}.bind(this)'

    'React Native Component Class':
        'prefix': 'rnc'
        'body': '''
                import React, { Component } from 'react'
                import { StyleSheet, View } from 'react-native'

                export default class $1 extends Component {
                  render() {
                    return (
                      <View style={styles.container}>
                      </View>
                    )
                  }
                }

                const styles = StyleSheet.create({
                  container: {
                    flex: 1
                  }
                })
                '''

    'React Function':
        'prefix': 'rf'
        'body': '''
                import React from 'react'

                export default function $1({  }) {
                  return (
                    <div></div>
                  )
                }
                '''

    'React Class':
        'prefix': 'rc'
        'body': '''
                import React, { Component } from 'react'

                export default class $1 extends Component {
                  render() {
                    return ${2:null}
                  }
                }
                '''

        # Testing
        'describe':
            'prefix': 'desc'
            'body': "describe('$1', () => {\n\t$0\n})"

        'it':
            'prefix': 'it'
            'body': "it('$1', ($2) => {\n\t$0\n})"

        'expect':
            'prefix': 'expect'
            'body': "expect($1, '${2:to equal}', $3)"


'.source.ts, .source.tsx':
    'styled component':
        'prefix': 'styled'
        'body': '''
                const $2 = styled.${1:div}`
                  $3
                `
                '''

    'React function':
        'prefix': 'rf'
        'body': '''
                  import React from 'react'

                  interface $0Props {
                  }

                  export const $0: React.FC<$0Props> = ({  }) => {
                    return (
                      <div></div>
                    )
                  }

                  export default $0
                '''
